<h2>ZF2015-05: Potential XSS and Open Redirect vectors in zend-diactoros</h2>

<p>
    The Drupal Security Team notified us of a potential issue with the <a 
    href="https://github.com/zendframework/zend-diactoros">Diactoros</a> URI implementation.
    Diactoros is a <a href="http://www.php-fig.org/psr/psr-7/">PSR-7</a> implementation of
    HTTP messages.
</p>

<p>
    If the path from a <code>Zend\Diactoros\Uri</code> instance is used to generate links,
    form targets, or headers, and omits the scheme and authority, a potential XSS and/or open
    redirect vector is possible if the path starts with double slashes and a path segment
    that validates as a hostname; in such a situation, it may be interpreted as a scheme-relative
    link.
</p>

<p>
    The vulnerability exists in all stable versions of zend-diactoros prior to 1.0.4.
</p>

<h3>Action Taken</h3>

<p>
    <code>Zend\Diactoros\Uri::filterPath()`</code> was updated to ensure that the returned path
    will never begin with double slashes. Tests were also added to prevent a regression in the future.
</p>

<p>
    The patch fixing the issues has been applied in the following versions:
</p>

<ul>
    <li>zend-diactoros 1.0.4</kbd>
</ul>

<p>
    This vulnerability has also been disclosed as <a 
        href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3257">CVE-2015-3257</a>.
</p>

<h3>Recommendations</h3>

<p>
    If you are using <code>Zend\Diactoros\Uri</code> to generate links, form targets, or headers
    without including the scheme and authority, we recommend:
</p>

<ul>
    <li>Upgrading immediately to zend-diactoros 1.0.4.</li>
    <li>Consider altering your code to generate absolute URIs (which can be done by simply casting
        the <code>Uri</code> instance to a string).</li>
</ul>

<h3>Acknowledgments</h3>

<p>
    The Zend Framework team thanks the following for identifying the issues and 
    working with us to help protect its users:
</p>

<ul>
    <li><a href="https://security.drupal.org">The Drupal Security Team</a>, who 
        notified us of the issue and provided the proof-of-vulnerability;</li>
    <li><a href="http://www.garfieldtech.com/">Larry Garfield</a>, who asked 
        the Drupal Security Team to work with us;</li>
    <li><a href="https://mwop.net/">Matthew Weier O'Phinney</a>, who wrote the patch for the issue.</li>
</ul>

<?php echo $this->render('security/policy');
