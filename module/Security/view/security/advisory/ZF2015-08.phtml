<h2>ZF2015-08: Potential SQL injection vector using null byte for PDO (MsSql, SQLite)</h2>

<p>
    The PDO adapters of Zend Framework 1 do not filter null bytes values in
    SQL statements. A PDO adapter can treat null bytes in a query as a string
    terminator, allowing an attacker to add arbitrary SQL following a null byte,
    and thus create a SQL injection. 
</p>

<p>
    We tested and verified the null byte injection using pdo_dblib (FreeTDS) on a Linux
    environment to access a remote Microsoft SQL Server, and also tested against
    and noted the vector against pdo_sqlite.
</p>


<h3>Action Taken</h3>

<p>
    We added null byte filtering in the PDO abstract component
    <code>Zend_Db_Adapter_Pdo_Abstract</code>. We decided to use the abstract component to
    prevent null byte injection in all the PDO adapters once we discovered
    the situation was not specific to pdo_dblib.
</p>

<p>
    We used the PHP's addcslashes to sanitize and properly quote null bytes: 
</p>

<pre><code class="lang-php">
$value = addcslashes($value, "\000\032");
</code></pre>

<p>
    The following releases contain the fixes:
</p>

<ul>
    <li>Zend Framework 1.12.16</li>
</ul>


<h3>Recommendations</h3>

<p>
    If you use one of the PDO-based adapters in Zend Framework 1, we recommend
    upgrading to 1.12.16 immediately.
</p>

<h3>Acknowledgments</h3>

<p>
    The Zend Framework team thanks the following for identifying the issues and 
    working with us to help protect its users:
</p>

<ul class="ul">
    <li>Chris Kings-Lynne, who discovered and reported the issue against the <code>Zend_Db_Adapter_Pdo_Mssql</code> component of ZF1;</li>
    <li><a href="http://zimuel.it">Enrico Zimuel</a>, who provided the patch.
</ul>
