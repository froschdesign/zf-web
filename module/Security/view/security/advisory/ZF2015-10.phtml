<h2>ZF2015-10: Potential Information Disclosure in Zend\Crypt\PublicKey\Rsa\PublicKey</h2>

<p>
    <code>Zend\Crypt\PublicKey\Rsa\PublicKey</code> has a call to
    <code>openssl_public_encrypt()</code> which uses PHP's default
    <code>$padding</code> argument, which specifies
    <code>OPENSSL_PKCS1_PADDING</code>, indicating usage of PKCS1v1.5 padding. This
    padding has a known vulnerability, the
    <a href="http://crypto.stackexchange.com/questions/12688/can-you-explain-bleichenbachers-cca-attack-on-pkcs1-v1-5">Bleichenbacher's chosen-ciphertext
    attack</a>,
    which can be used to decrypt arbitrary ciphertexts.
</p>


<h3>Action Taken</h3>

<ul>
    <li><code>Zend\Crypt\PublicKey\Rsa\PublicKey::encrypt()</code> was updated to accept
        an additional argument, <code>$padding</code>; the default value for this argument
        was set to <code>OPENSSL_PKCS1_OAEP_PADDING</code>.</li>
    <li><code>Zend\Crypt\PublicKey\Rsa\PrivateKey::decrypt()</code> was updated to accept
        an additional argument, <code>$padding</code>; the default value for this argument
        was set to <code>OPENSSL_PKCS1_OAEP_PADDING</code>.</li>
    <li><code>Zend\Crypt\PublicKey\Rsa::encrypt()</code> was updated to accept an additional
        optional argument, <code>$padding</code>, allowing the user to specify the padding
        to use with <code>PublicKey::encrypt()</code>.</li>
    <li><code>Zend\Crypt\PublicKey\Rsa::decrypt()</code> was updated to accept an additional
        optional argument, <code>$padding</code>, allowing the user to specify the padding
        to use with <code>PrivateKey::decrypt()</code>.</li>
</ul>

<p>
    The above changes represent a backwards-compatibility break, but were
    necessary to prevent the outlined vulnerability. If you were using <code>Zend\Crypt\PublicKey\Rsa</code>
    previously, you will likely need to re-encrypt any data you've previously encrypted to
    use the new padding. This can be done as follows:
</p>

<pre><code class="lang-php">
$decrypted = $rsa->decrypt($data, $key, $rsa::MODE_AUTO, OPENSSL_PKCS1_PADDING);
$encrypted = $rsa->encrypt($data, $key); // Encrypted using OPENSSL_PKCS1_OAEP_PADDING
</code></pre>

<p>
    The key may have a value of <code>null</code> in each of the examples above.
</p>

<p>
    The following releases contain the fixes:
</p>

<ul>
    <li>Zend Framework 2.4.9</li>
    <li>zend-framework/zend-crypt 2.4.9</li>
    <li>zend-framework/zend-crypt 2.5.2</li>
</ul>

<p>
    This advisory was given the <a href="https://cve.mitre.org">CVE</a> identifier
    <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-7503">CVE-2015-7503</a>
</p>

<h3>Recommendations</h3>

<p>
    If you use zend-crypt via either Zend Framework 2 or the
    zendframework/zend-crypt package, and are using the RSA public key
    functionality, we recommend upgrading to 2.4.9/2.5.2 immediately.
</p>

<h3>Acknowledgments</h3>

<p>
    The Zend Framework team thanks the following for identifying the issues and 
    working with us to help protect its users:
</p>

<ul class="ul">
    <li><a href="https://paragonie.com">Paragon Initiative Enterprises</a> for reporting the vulnerability and verifying the patch, and</li>
    <li><a href="http://zimuel.it">Enrico Zimuel</a>, who provided the patch.
</ul>
