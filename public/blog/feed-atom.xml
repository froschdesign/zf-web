<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Blog Entries - ZF Blog</title>
  <updated>2015-11-25T21:45:00+00:00</updated>
  <generator uri="http://framework.zend.com" version="2">Zend_Feed_Writer</generator>
  <link rel="alternate" type="text/html" href="http://framework.zend.com/blog.html"/>
  <link rel="self" type="application/atom+xml" href="http://framework.zend.com/blog-atom.xml"/>
  <id>http://framework.zend.com/blog.html</id>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Zend Framework 3 Update and Roadmap]]></title>
    <published>2015-11-25T21:45:00+00:00</published>
    <updated>2015-11-25T21:45:00+00:00</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/zend-framework-3-update-and-roadmap.html"/>
    <id>http://framework.zend.com/blog/zend-framework-3-update-and-roadmap.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>In October, while at ZendCon, I presented a talk on Zend
Framework 3 entitled "Components, PSR-7, and Middleware: Zend
Framework 3." You can <xhtml:a href="http://weierophinney.github.io/2015-10-22-ZF3/">view it
online</xhtml:a>, but this post discusses current status, details some
decisions, and points to the work still to be done. It's a long
read; grab a warm beverage, maybe some popcorn, and take your
time.</xhtml:p>
<xhtml:h2>Prelude</xhtml:h2>
<xhtml:p>Zend Framework 3 is not just a new release of the framework.
It's an <xhtml:em>initiative</xhtml:em>, encompassing a number of strategies
and projects. Do not get hung up on when the main Zend Framework
repository will be tagged as 3.0; the MVC is just one part of an
overall plan. This post details those parts; many of them are
<xhtml:em>already accomplished.</xhtml:em> Hopefully, by the end of this post,
you'll see what you can already leverage, and what you <xhtml:em>may
already be leveraging.</xhtml:em></xhtml:p>
<xhtml:p>Mirroring my ZendCon presentation, I've broken this out into
four primary parts: Components, PSR-7, Middleware, and Zend
Framework 3.</xhtml:p>
<xhtml:h2>Components</xhtml:h2>
<xhtml:p>Zend Framework was originally envisioned and positioned as a
component library that <xhtml:em>also</xhtml:em> shipped an MVC framework.
Unlike <xhtml:a href="http://pear.php.net">PEAR</xhtml:a>, it was
all-or-nothing; if you wanted a single component, you downloaded
the entire framework; if you wanted to use the MVC framework, you
downloaded the entire framework. Over time, the MVC became the
predominant feature, and most code was written or adapted to ensure
the various components worked properly when used with the
framework, with very little emphasis on standalone usage.</xhtml:p>
<xhtml:p>When we started on ZF2, we essentially continued down this path.
However, early in the ZF2 development, <xhtml:a href="https://getcomposer.org">Composer</xhtml:a> emerged in the PHP
ecosystem, and we decided to leverage that both for distribution of
ZF itself, but also for its components. However, the
semi-manual/semi-automated approach we used made components
second-class citizens, requiring them to be versioned
simultaneously, resulting in slower releases.</xhtml:p>
<xhtml:p>As a result, a primary goal of the ZF3 initiatives was to split
the components into their own repositories, with their own
development cycles; the main Zend Framework repository then becomes
a meta-package, defining the individual components as dependencies,
but shipping no actual code.</xhtml:p>
<xhtml:p>The split took quite some time to orchestrate, but <xhtml:a href="https://mwop.net/blog/2015-05-15-splitting-components-with-git.html">
was accomplished in May</xhtml:a>, with the help of <xhtml:a href="https://github.com/gianarb">Gianluca Arbezzano</xhtml:a> and <xhtml:a href="http://www.corley.it/">Corley</xhtml:a>, and released as version
2.5.</xhtml:p>
<xhtml:p>I'll be following up this post with some of the benefits we've
gained from the split, but the overall point is that the separation
will help us improve components more granularly, expand the number
of contributors, and accelerate component development.</xhtml:p>
<xhtml:p>Composer has been wildly successful. It simplifies and
streamlines the ability to manage application dependencies, as well
as consume them in your code (by providing a common autoloader for
all dependencies). Our observation is that an increasing number of
developers and companies are choosing to piece together bespoke
frameworks targeted at their business needs using commodity
components. Splitting component lifecycles facilitates usage of ZF
components in these paradigms.</xhtml:p>
<xhtml:h2>PSR-7</xhtml:h2>
<xhtml:p><xhtml:a href="http://www.php-fig.org/psr/psr-7/">PSR-7</xhtml:a> (<xhtml:a href="http://www.php-fig.org/psr/psr-7/meta/">meta</xhtml:a>) defines a set of
HTTP message interfaces. PHP Standard Recommendations (PSR) are a
product of the <xhtml:a href="http://www.php-fig.org/">Framework Interop
Group</xhtml:a>, which exists to identify existing practices and
development approaches, and standardize them, with the goal of
increasing interoperability between frameworks and libraries.
Composer is the fruit of the very first PSR, <xhtml:a href="http://www.php-fig.org/psr/psr-0/">PSR-0</xhtml:a>, which provided a
common methodology around autoloading.</xhtml:p>
<xhtml:p>PSR-7 exists because PHP, for all its web centricity, does not
actually model HTTP messages. Most frameworks have provided message
abstraction of one form or another since 2005, but they all differ,
which means migrating from one framework or HTTP client library to
another — or even one <xhtml:strong>version</xhtml:strong> of such a project to
another — requires learning a new system for dealing with HTTP
messages.</xhtml:p>
<xhtml:p>Interestingly, other languages, including Python, Ruby, and
Node.js, <xhtml:em>do</xhtml:em> provide common HTTP message abstractions, and
the result is that code written targeting HTTP messages will
typically work regardless of the framework chosen. This leads to a
lot of cross-pollination, and allows developers to pick and choose
libraries based on their strengths and features, not on the
framework.</xhtml:p>
<xhtml:p>Many of us in the PHP community feel that HTTP message
abstractions should be a <xhtml:em>commodity</xhtml:em>.</xhtml:p>
<xhtml:p>PSR-7 accomplishes this, and code targeting PSR-7 can thus be
re-used by any framework or project that also consumes PSR-7.</xhtml:p>
<xhtml:p>PSR-7 was accepted in mid-May; the same day it was accepted, we
released:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-diactoros">Diactoros</xhtml:a>, a
PSR-7 implementation.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-stratigility">Stratigility</xhtml:a>,
a PSR-7 middleware foundation inspired by <xhtml:a href="https://github.com/senchalabs/connect">Sencha Connect</xhtml:a>.</xhtml:li>
</xhtml:ul>
<xhtml:p>We feel that PSR-7 is the future of PHP interoperability when
writing HTTP-centric applications, and these components form a
foundation for projects that choose to target PSR-7.</xhtml:p>
<xhtml:h2>Middleware and Expressive</xhtml:h2>
<xhtml:p>When describing Stratigility in the previous section, I used the
term "middleware." What is middleware?</xhtml:p>
<xhtml:p>Middleware is, quite simply, code sitting between an incoming
HTTP request, and the outgoing HTTP response. There are a number of
different middleware signatures floating around (subject for a
pending blog post!), but the one we've implemented in Stratigility
is:</xhtml:p>
<xhtml:pre>
<xhtml:code class="language-php">function (
    ServerRequestInterface $request
    ResponseInterface $response,
    callable $next
) : ResponseInterface
</xhtml:code>
</xhtml:pre>
<xhtml:p>where <xhtml:code>$next</xhtml:code> can be used to invoke the next
middleware in the system, if any. This same signature is being
adopted by a number of emerging PSR-7 centric projects such as
<xhtml:a href="http://relayphp.com">Relay</xhtml:a>, and <xhtml:a href="http://www.slimframework.com/2015/02/11/whats-up-with-version-3.html">
Slim v3</xhtml:a>.</xhtml:p>
<xhtml:p><xhtml:a href="http://framework.zend.com/expressive">Expressive</xhtml:a> is
a new <xhtml:em>microframework</xhtml:em> for building PSR-7 middleware
applications.</xhtml:p>
<xhtml:p>Built on top of Stratigility, Expressive is meant to provide
minimal plumbing for your applications. A primary goal is to allow
<xhtml:em>you</xhtml:em> to choose the components you want, and then to provide
minimal wiring to get you started. It provides:</xhtml:p>
<xhtml:ul>
<xhtml:li>typehinting against <xhtml:a href="https://github.com/container-interop/container-interop">container-interop</xhtml:a>
allowing <xhtml:em>you</xhtml:em> to select a service container from which to
pull middleware once matched.</xhtml:li>
<xhtml:li>a <xhtml:code>RouterInterface</xhtml:code>, and several implementations, so
you can choose a routing implementation that best suits your
application needs.</xhtml:li>
<xhtml:li>a <xhtml:code>TemplateRendererInterface</xhtml:code>, and several
implementations, so you can choose a template engine that suits the
needs of the middleware you write that may use templating — and
allow you to swap out engines seamlessly.</xhtml:li>
<xhtml:li>an error handling mechanism, and choices for how to handle
errors in both development and production.</xhtml:li>
</xhtml:ul>
<xhtml:p>We leverage Composer's installation hooks to prompt you for your
choices (thanks for the contribution, <xhtml:a href="https://xtreamwayz.com">Geert</xhtml:a>!), so that once you install the
Expressive skeleton, you're prepared to start developing
immediately.</xhtml:p>
<xhtml:p>Expressive is currently in release candidate status, and we hope
to finalize a stable release soon!</xhtml:p>
<xhtml:p>We like middleware because:</xhtml:p>
<xhtml:ul>
<xhtml:li>it tends to be very focused and small, and thus readily
understood.</xhtml:li>
<xhtml:li>it adapts the <xhtml:a href="https://en.wikipedia.org/wiki/Unix_philosophy">Unix philosphy</xhtml:a>
(creating complex behavior by piping messages between
single-purpose tools) to HTTP applications.</xhtml:li>
<xhtml:li>it tends to be quite performant.</xhtml:li>
</xhtml:ul>
<xhtml:p>Any middleware that targets PSR-7 also gains the ability to
interop with any other system targeting PSR-7. This means that the
ecosystem for middleware users is not a single framework, but any
framework that uses PSR-7. We're already seeing <xhtml:a href="http://github.com/oscarotero/psr7-middlewares">amazing middleware
libraries</xhtml:a> popping up, and these will work <xhtml:em>across the PHP
ecosystem</xhtml:em>. Providing a middleware microframework via
Expressive allows our users to capitalize on this.</xhtml:p>
<xhtml:h2>Zend Framework 3</xhtml:h2>
<xhtml:p>For many, "Zend Framework 3" means the MVC framework; as such,
much of the above may feel like a sideshow, not the main thrust of
the new version. This is a misconception.</xhtml:p>
<xhtml:p>We decided early this year that we will <xhtml:em>not</xhtml:em> be changing
the MVC significantly.</xhtml:p>
<xhtml:p>When we went from version 1 to version 2, we did a complete
rewrite of the MVC. While the new MVC is architecturally superior,
its completely different structure meant there was zero way to
automate migration, which left many ZF1 users stranded. We did not
want to repeat this mistake.</xhtml:p>
<xhtml:p>Additionally, the primary issues around the current MVC are:</xhtml:p>
<xhtml:ul>
<xhtml:li>performance</xhtml:li>
<xhtml:li>interoperability (specifically, ability to use middleware)</xhtml:li>
</xhtml:ul>
<xhtml:p>These are things we <xhtml:em>can</xhtml:em> tackle, while retaining most,
if not all, backwards compatibility.</xhtml:p>
<xhtml:p>As such, the primary changes we identified were:</xhtml:p>
<xhtml:ul>
<xhtml:li>zend-servicemanager performance</xhtml:li>
<xhtml:li>zend-eventmanager performance</xhtml:li>
<xhtml:li>ability to dispatch PSR-7 middleware</xhtml:li>
<xhtml:li>reduction of dependencies</xhtml:li>
</xhtml:ul>
<xhtml:h3>ServiceManager</xhtml:h3>
<xhtml:p>We feel zend-servicemanager offers some unique features that are
not found in other containers:</xhtml:p>
<xhtml:ul>
<xhtml:li>lazy services</xhtml:li>
<xhtml:li>delegator services</xhtml:li>
<xhtml:li>interface injection (via initializers)</xhtml:li>
<xhtml:li>abstract factories</xhtml:li>
</xhtml:ul>
<xhtml:p>As such, there are tremendous reasons to choose it over other
containers. However, when you have large object graphs, and if
you're heavily using features such as abstract factories and
initializers, the design in v2 can become tremendously slow.</xhtml:p>
<xhtml:p><xhtml:a href="http://www.michaelgallego.fr">Michäel Gallego</xhtml:a> did
some deep analysis of the service manager, and identified ways the
performance could be radically improved, providing a hefty patch to
do so. The main issue was that much of the code for loading
services was checking for state changes in the container; as such,
the main thrust of the patch Michäel provided was to have state
changes — additions of factories to the container — reconfigure the
container, so that <xhtml:em>pulling</xhtml:em> from the container becomes
cheap. The result is a 4X performance boost that is <xhtml:em>mostly</xhtml:em>
backwards compatible!</xhtml:p>
<xhtml:p>There are a few BC breaks with this change, however, which means
any component that provides factories is requiring updates to be
compatible. These are mostly minor, and we're currently working on
ways we may be able to make code forwards compatible while
retaining backwards compatibility.</xhtml:p>
<xhtml:p>You can read about the changes in the <xhtml:a href="https://github.com/zendframework/zend-servicemanager/blob/develop/doc/book/migration.md">
migration guide</xhtml:a>.</xhtml:p>
<xhtml:h3>EventManager</xhtml:h3>
<xhtml:p>Similarly, zend-eventmanager is a unique offering, providing
mechanisms for:</xhtml:p>
<xhtml:ul>
<xhtml:li>intercepting filters</xhtml:li>
<xhtml:li>subject/observer</xhtml:li>
<xhtml:li>signal slots</xhtml:li>
<xhtml:li>events</xhtml:li>
</xhtml:ul>
<xhtml:p>In order to accomplish this, however, it has a lot of code
around checking for changes in shared listeners. Additionally, it
has leveraged shared solutions such as the
<xhtml:code>PriorityQueue</xhtml:code> implementation in zend-stdlib, which
provide necessary features, but often at a performance cost.</xhtml:p>
<xhtml:p>Michäel Gallego, along with <xhtml:a href="http://www.zimuel.it">Enrico Zimuel</xhtml:a>, performed comprehensive
profiling, and provided a refactor of the component that resulted
in 4X performance benefits!</xhtml:p>
<xhtml:p>You can read about the changes in the <xhtml:a href="https://github.com/zendframework/zend-eventmanager/tree/develop/doc/book/migration">
migration guide</xhtml:a>. Of particular interest is that the 2.7 version
provides forwards compatibility features allowing you to prepare
your applications <xhtml:em>now</xhtml:em> for version 3!</xhtml:p>
<xhtml:h3>Dispatching Middleware</xhtml:h3>
<xhtml:p>As noted in the previous section on PSR-7, we feel that the
future of PHP web applications is in middleware. We want users to
benefit from the middleware ecosystem, but also to migrate to it.
To enable this, we decided to build a
<xhtml:code>MiddlewareListener</xhtml:code> for zend-mvc.</xhtml:p>
<xhtml:p>First, though, we had to build <xhtml:a href="https://github.com/zendframework/zend-psr7bridge">a PSR-7
bridge</xhtml:a>, to allow translation of the zend-http request and
response messages already present in zend-mvc to PSR-7, and vice
versa. (We chose <xhtml:em>not</xhtml:em> to use PSR-7 directly in zend-mvc, as
doing so would require changes anywhere you were previously using
the request and/or response objects.) This code can be used now,
anywhere you need to do such translations.</xhtml:p>
<xhtml:p>With that out of the way, we developed the
<xhtml:code>MiddlewareListener</xhtml:code>. In v3, this will be registered by
default, at a higher priority than the standard
<xhtml:code>DispatchListener</xhtml:code>. If it detects a
<xhtml:code>middleware</xhtml:code> key in the route matches, it will pull that
middleware from the container and dispatch it, using the PSR-7
bridge; otherwise, it will return early, allowing the
<xhtml:code>DispatchListener</xhtml:code> to take over.</xhtml:p>
<xhtml:p>The <xhtml:code>MiddlewareListener</xhtml:code> thus becomes your migration
path from the zend-mvc to Expressive or other middleware stacks,
but also allows you to compose middleware from the greater
ecosystem in your zend-mvc applications!</xhtml:p>
<xhtml:p>This feature is available currently on the develop branch of
zend-mvc, and will be released with v3 of that component.</xhtml:p>
<xhtml:h3>Reducing Dependencies</xhtml:h3>
<xhtml:p>Currently, the framework repository requires <xhtml:em>every</xhtml:em> Zend
Framework component (except the new ones such as Diactoros,
Stratigility, Expressive, and the PSR-7 bridge). This poses a
problem: what if we want to update another component earlier than
others? How will users then opt-in to such new versions?</xhtml:p>
<xhtml:p>As an example, we're pushing back plans for refactoring the
filter, validator, input filter, and form components, as the
proposed changes will take quite some time. However, not every
application <xhtml:em>needs</xhtml:em> these facilities, and those that do
<xhtml:em>should</xhtml:em> be able to selectively upgrade. But if we pin to
semantic versions — e.g., <xhtml:code>~3.0</xhtml:code> — users will not be
able to do so until the framework upgrades, making it an all or
nothing approach.</xhtml:p>
<xhtml:p>As such, we've decided to change the requirements for zend-mvc,
the framework repository, and the skeleton to the bare minimum
needed for an MVC application. We're still scoping this effort,
however, so there's time to get your feedback considered.</xhtml:p>
<xhtml:p>This will, of course, affect existing applications. You will
need to add in dependencies that previously were assumed. Composer,
however, makes these relatively trivial:</xhtml:p>
<xhtml:pre>
<xhtml:code class="language-bash">$ composer require zendframework/zend-form
$ composer require zendframework/zend-session
$ composer require zendframework/zend-paginator
</xhtml:code>
</xhtml:pre>
<xhtml:p>The more problematic part of this will be registration of
abstract factories, plugin managers, etc. We're still working on a
plan for that, and encourage you <xhtml:a href="https://github.com/zendframework/zend-mvc/issues/46">to share any
ideas you might have around it</xhtml:a>.</xhtml:p>
<xhtml:h2>Documentation</xhtml:h2>
<xhtml:p>One area where Zend Framework is consistently criticized is its
documentation.</xhtml:p>
<xhtml:ul>
<xhtml:li>We don't have enough documentation</xhtml:li>
<xhtml:li>Documentation isn't updated to reflect new features.</xhtml:li>
<xhtml:li>Documentation doesn't detail how to consume a component within
the MVC framework; or</xhtml:li>
<xhtml:li>Documentation doesn't detail how to use the component
standalone.</xhtml:li>
</xhtml:ul>
<xhtml:p>With the split to component repositories, we can tackle some of
this more easily. We are in the process of moving all documentation
into the relevant component repositories, which allows us to block
merging of features based on lack of contributed documentation.
This will help us keep the documentation up-to-date.</xhtml:p>
<xhtml:p>However, we need help <xhtml:em>writing</xhtml:em> documentation. We need
<xhtml:em>you</xhtml:em> to indicate what documentation you feel is missing —
and, better yet, <xhtml:em>contribute</xhtml:em> that documentation, to help
others in the same situation. One reflection I've made is that
writing documentation often also points to ways to improve the
code; don't discount writing documentation as a non-coding
activity!</xhtml:p>
<xhtml:p>The documentation migration is being faciliated by <xhtml:a href="http://blog.hock.in">Gary Hockin</xhtml:a>. He is automating the
migration via a series of scripts, and also creating issues on each
repository indicating common updates that need to happen to fully
complete the transition from reStructured Text to Markdown. You can
help by perusing the list available at the link below, and
submitting pull requests:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is:open+is:issue+org:zendframework+label:documentation+label:EasyFix">
Documentation migration issue list</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:p>At the time of writing, he has not yet run the script over all
repositories, but indicates that he should accomplish this feat
within the next 10 days; as such, keep checking that link!</xhtml:p>
<xhtml:h2>Roadmap</xhtml:h2>
<xhtml:p>As noted, we've made significant progress since announcing the
ZF3 initiative in March. We still have a ways to go, however:</xhtml:p>
<xhtml:ul>
<xhtml:li>We're still finalizing changes to Expressive prior to a stable
release.</xhtml:li>
<xhtml:li>We're only halfway through the <xhtml:a href="https://github.com/zendframework/maintainers/wiki/ZF3-code-refactoring">
list of components needing service manager and/or event manager
migrations</xhtml:a>, and could use some assistance completing this task.
We cannot do a zend-mvc beta currently until this is done.</xhtml:li>
<xhtml:li>We're still identifying what components will be considered
"core" to the MVC, and could <xhtml:a href="https://github.com/zendframework/zend-mvc/issues/46">use your
feedback</xhtml:a>.</xhtml:li>
<xhtml:li>Related, we're still identifying what components will be
considered "core" to the framework, if the list is not identical to
those in the MVC; again, <xhtml:a href="https://github.com/zendframework/zf2/issues/7646">feedback is
welcome</xhtml:a>.</xhtml:li>
</xhtml:ul>
<xhtml:p>For a number of considerations, we cannot at this time create a
date-based roadmap; we will do releases when code is ready and
meets the project quality guidelines. The links above, and in the
documentation section, provide ways that you can help; the more
help we get, the sooner we can potentially release.</xhtml:p>
<xhtml:h2>Closing Notes</xhtml:h2>
<xhtml:p>First, this post was long, and also long overdue. My plan going
forward is to provide bi-weekly updates on the <xhtml:a href="http://framework.zend.com/blog/">Zend Framework blog</xhtml:a>, so that
you, Zend Framework's users and development community, can keep
track of progress. In those, I will also be listing areas where we
can particularly use contributions. Be aware, however, that with
holidays coming up in many countries, that progress will be slow in
the short-term.</xhtml:p>
<xhtml:p>We're very excited about the Zend Framework 3
<xhtml:em><xhtml:strong>initiative</xhtml:strong></xhtml:em>. It's a change in direction
for the framework, returning to its roots as a component library
first, which happens to also provide a full-stack framework.</xhtml:p>
<xhtml:p>We see ZF3 as a movement: an end to framework silos, by
providing quality, commodity code that can be used everwhere and
anywhere. An end to saying "I'm a ZF developer," or "I'm a Laravel
developer," and a return to, "I'm a PHP developer." We hope you'll
help us complete that journey!</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Zend Framework 1.12.17 and 2.4.9 Released!]]></title>
    <published>2015-11-23T20:30:00+00:00</published>
    <updated>2015-11-23T20:30:00+00:00</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/zend-framework-1-12-17-and-2-4-9-released.html"/>
    <id>http://framework.zend.com/blog/zend-framework-1-12-17-and-2-4-9-released.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>The Zend Framework community is pleased to announce the
immediate availability of:</xhtml:p>
<xhtml:ul>
<xhtml:li>Zend Framework <xhtml:strong>1.12.17</xhtml:strong></xhtml:li>
<xhtml:li>Zend Framework <xhtml:strong>2.4.9</xhtml:strong></xhtml:li>
</xhtml:ul>
<xhtml:ul>
<xhtml:li><xhtml:a href="/downloads/latest">http://framework.zend.com/downloads/latest</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:p>These releases contain security fixes.</xhtml:p>
<xhtml:h2>Security Fixes</xhtml:h2>
<xhtml:h3>ZF2015-09</xhtml:h3>
<xhtml:p><xhtml:a href="/security/advisory/ZF2015-09">ZF2015-09</xhtml:a> provides a
security hardening patch for users of our word-based CAPTCHA
adapters, ensuring better randomization of the letters
generated.</xhtml:p>
<xhtml:p>This particular issue touches each of the following projects,
and was fixed in the versions specified:</xhtml:p>
<xhtml:ul class="ul">
<xhtml:li>Zend Framework 1, version 1.12.17</xhtml:li>
<xhtml:li>Zend Framework 2, versions 2.4.9</xhtml:li>
<xhtml:li>zend-captcha, versions 2.4.9 and 2.5.2</xhtml:li>
</xhtml:ul>
<xhtml:h3>ZF2015-10</xhtml:h3>
<xhtml:p><xhtml:a href="/security/advisory/ZF2015-10">ZF2015-10</xhtml:a> addresses
potential information disclosure for users of Zend Framework's
<xhtml:code>Zend\Crypt\PublicKey\Rsa</xhtml:code> support, due to an insecure
OpenSSL padding default. The issue is patched in Zend Framework
2.4.9 and zend-crypt 2.4.9/2.5.2.</xhtml:p>
<xhtml:h2>Changelog</xhtml:h2>
<xhtml:p>For the full changelog on each version:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="/changelog/1.12.17">http://framework.zend.com/changelog/1.12.17</xhtml:a></xhtml:li>
<xhtml:li><xhtml:a href="/changelog/2.4.9">http://framework.zend.com/changelog/2.4.9</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:h2>Long Term Support</xhtml:h2>
<xhtml:p>As a reminder, the 2.4 series is our current Long Term Support
release, and will receive security and critical bug fixes until 31
March 2018.</xhtml:p>
<xhtml:p>You can opt-in to the LTS version by pinning your
<xhtml:code>zendframework/zendframework</xhtml:code> <xhtml:a href="https://getcomposer.org">Composer</xhtml:a> requirement to the version
<xhtml:code>~2.4.0</xhtml:code>.</xhtml:p>
<xhtml:p><xhtml:a href="/long-term-support">Visit our Long Term Support
information page</xhtml:a> for more information.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Zend Framework 1.12.16 and 2.4.8 Released!]]></title>
    <published>2015-09-15T19:00:00+00:00</published>
    <updated>2015-09-15T19:00:00+00:00</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/zend-framework-1-12-16-and-2-4-8-released.html"/>
    <id>http://framework.zend.com/blog/zend-framework-1-12-16-and-2-4-8-released.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>The Zend Framework community is pleased to announce the
immediate availability of:</xhtml:p>
<xhtml:ul>
<xhtml:li>Zend Framework <xhtml:strong>1.12.16</xhtml:strong></xhtml:li>
<xhtml:li>Zend Framework <xhtml:strong>2.4.8</xhtml:strong></xhtml:li>
</xhtml:ul>
<xhtml:ul>
<xhtml:li><xhtml:a href="/downloads/latest">http://framework.zend.com/downloads/latest</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:p>These releases contain a security fixes.</xhtml:p>
<xhtml:h2>Security Fixes</xhtml:h2>
<xhtml:h3>ZF2015-07</xhtml:h3>
<xhtml:p><xhtml:a href="/security/advisory/ZF2015-07">ZF2015-07</xhtml:a> addresses
attack vectors that arise due to incorrect permissions masks when
creating directories and files within library code.</xhtml:p>
<xhtml:p>This particular issue touches each of the following projects,
and was fixed in the versions specified:</xhtml:p>
<xhtml:ul class="ul">
<xhtml:li>Zend Framework 1, version 1.12.16</xhtml:li>
<xhtml:li>Zend Framework 2, versions 2.4.8</xhtml:li>
<xhtml:li>zf-apigility-doctrine, version 1.0.3</xhtml:li>
<xhtml:li>zend-cache, versions 2.4.8 and 2.5.3</xhtml:li>
</xhtml:ul>
<xhtml:h3>ZF2015-08</xhtml:h3>
<xhtml:p><xhtml:a href="/security/advisory/ZF2015-08">ZF2015-08</xhtml:a> addresses
potential null byte injection of SQL statements issued using Zend
Framework's pdo_dblib (FreeTDS) and pdo_sqlite adapters. The issue
is patched in Zend Framework 1.12.16.</xhtml:p>
<xhtml:h2>Changelog</xhtml:h2>
<xhtml:p>For the full changelog on each version:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="/changelog/1.12.16">http://framework.zend.com/changelog/1.12.16</xhtml:a></xhtml:li>
<xhtml:li><xhtml:a href="/changelog/2.4.8">http://framework.zend.com/changelog/2.4.8</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:p>In particular, the 2.4.8 release has numerous fixes in the
InputFilter, Validator, and Form components introduced to increase
stability and reinstate behavior prior to version 2.4.0. At this
time, forms and input filters created using code from pre-2.4
should work identically.</xhtml:p>
<xhtml:p>We have, however, <xhtml:em>deprecated</xhtml:em> the
<xhtml:code>allow_empty</xhtml:code> and <xhtml:code>continue_if_empty</xhtml:code> flags,
and provided notes in the changelog that describe alternatives to
their usage. We have found that these flags, particularly in
combination with the <xhtml:code>required</xhtml:code> flag and validators, can
lead to unexpected or unintended behavior, often contradictory.
Deprecating them will allow us to introduce cleaner solutions in
future releases.</xhtml:p>
<xhtml:h2>Long Term Support</xhtml:h2>
<xhtml:p>As a reminder, the 2.4 series is our current Long Term Support
release, and will receive security and critical bug fixes until 31
March 2018.</xhtml:p>
<xhtml:p>You can opt-in to the LTS version by pinning your
<xhtml:code>zendframework/zendframework</xhtml:code> <xhtml:a href="https://getcomposer.org">Composer</xhtml:a> requirement to the version
<xhtml:code>~2.4.0</xhtml:code>.</xhtml:p>
<xhtml:p><xhtml:a href="/long-term-support">Visit our Long Term Support
information page</xhtml:a> for more information.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Announcing Expressive]]></title>
    <published>2015-08-26T18:25:00+00:00</published>
    <updated>2015-08-26T18:25:00+00:00</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/announcing-expressive.html"/>
    <id>http://framework.zend.com/blog/announcing-expressive.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>We are pleased to announce the immediate availability of a new
project, <xhtml:a href="https://github.com/zendframework/zend-expressive">Expressive</xhtml:a>!</xhtml:p>
<xhtml:p>Expressive allows you to write <xhtml:a href="http://www.php-fig.org/psr/psr-7/">PSR-7</xhtml:a> <xhtml:a href="https://github.com/zendframework/zend-stratigility/blob/master/doc/book/middleware.md">
middleware</xhtml:a> applications for the web. It is a simple
micro-framework built on top of <xhtml:a href="https://github.com/zendframework/zend-stratigility">Stratigility</xhtml:a>,
providing:</xhtml:p>
<xhtml:ul>
<xhtml:li>Dynamic routing</xhtml:li>
<xhtml:li>Dependency injection via container-interop</xhtml:li>
<xhtml:li>Templating</xhtml:li>
<xhtml:li>Error Handling</xhtml:li>
</xhtml:ul>
<xhtml:h2>Installation and Quick Start</xhtml:h2>
<xhtml:p>Expressive can get you up and running with an application in
minutes.</xhtml:p>
<xhtml:p>To install, use <xhtml:a href="https://getcomposer.org">Composer</xhtml:a>:</xhtml:p>
<xhtml:pre>
<xhtml:code class="lang-bash">
$ composer require zendframework/zend-expressive aura/router zendframework/zend-servicemanager
</xhtml:code>
</xhtml:pre>
<xhtml:p>From there to "hello, world,", all you now need is a single
file:</xhtml:p>
<xhtml:pre>
<xhtml:code class="lang-php">
// In index.php
use Zend\Expressive\AppFactory;

require 'vendor/autoload.php';

$app = AppFactory::create();
$app-&gt;route('/', function ($request, $response, $next) {
    $response-&gt;getBody()-&gt;write('Hello, world!');
    return $response;
});
$app-&gt;run();
</xhtml:code>
</xhtml:pre>
<xhtml:p>From there, fire up the built-in web server:</xhtml:p>
<xhtml:pre>
<xhtml:code class="lang-bash">
$ php -S 0.0.0.0:8080 -t .
</xhtml:code>
</xhtml:pre>
<xhtml:p>Browse to localhost:8080, and you should see it running!</xhtml:p>
<xhtml:p>Visit <xhtml:a href="http://zend-expressive.readthedocs.org/en/stable/quick-start/">our
documentation for the full quick start</xhtml:a>.</xhtml:p>
<xhtml:h2>Breaking out of the box</xhtml:h2>
<xhtml:p>A huge part of the PHP Renaissance has been due to the advent of
<xhtml:a href="https://getcomposer.org">Composer</xhtml:a>, which has
simplified dependency management, and led to tens of thousands of
standalone libraries and packages. As such, frameworks, while still
popular, are often being eschewed for homemade,
application-specific frameworks made of commodity components.
Frameworks simply cannot ignore this trend, and decoupling should
become the norm going forward.</xhtml:p>
<xhtml:p>With <xhtml:a href="https://apigility.org">Apigility</xhtml:a>, the Zend
Framework team began using third party software as part of the
solutions it provides. With Expressive, we took that even further:
we provide abstractions for routing and templating capabilities,
but largely rely on third-party libraries for the recommended
implementations.</xhtml:p>
<xhtml:p>Expressive features integrations with:</xhtml:p>
<xhtml:ul>
<xhtml:li>Aura.Router</xhtml:li>
<xhtml:li>FastRoute</xhtml:li>
<xhtml:li>Pimple</xhtml:li>
<xhtml:li>Plates</xhtml:li>
<xhtml:li>Twig</xhtml:li>
</xhtml:ul>
<xhtml:p>as well as related Zend Framework components. In most cases,
integrations were developed for third party libraries
<xhtml:em>before</xhtml:em> we wrote integrations with Zend Framework
components!</xhtml:p>
<xhtml:p>As such, Expressive is a small, single-purpose component that
can integrate other components to create a custom middleware
runtime for your applications.</xhtml:p>
<xhtml:h2>Where does this fit with Zend Framework?</xhtml:h2>
<xhtml:p>We feel that PSR-7 opens new paradigms for both interoperability
as well as for application design. Middleware offers a pattern for
re-use and composability that is often far simpler to understand,
and which often allows building complex applications from smaller
pieces. As such, we want to provide an easy way to build
middleware-based applications <xhtml:em>now</xhtml:em>.</xhtml:p>
<xhtml:p>We will, however, continue to ship Zend Framework and its
full-stack MVC. Many complex applications can benefit from the
highly flexible structure it provides, and we plan to continue
supporting those users well into the future. We also plan to add
capabilities (quite soon!) for executing PSR-7 based middleware
from within Zend Framework applications; this provides migration
paths in both directions for developers.</xhtml:p>
<xhtml:h2>More Information and Roadmap</xhtml:h2>
<xhtml:p>Expressive is open source software, and we're trying to follow
the mantra of "release early, release often." As such, our initial
stable tag is at 0.1.0, and we're requesting that you start playing
with it and letting us know what works and what doesn't. You can
report issues on the <xhtml:a href="https://github.com/zendframework/zend-expressive/issues">issue
tracker</xhtml:a>.</xhtml:p>
<xhtml:p>One big push for us has been to document everything we can; you
can currently <xhtml:a href="http://zend-expressive.readthedocs.org/en/stable/">browse our
documentation on ReadTheDocs</xhtml:a>. If you have questions, changes,
or additions you feel should be made, documentation is part of the
code repository itself, and issues can be raised just as they can
for code.</xhtml:p>
<xhtml:p>While this is an initial offering, we've put a lot of thought
into the various features and abstractions, and feel it is
essentially feature complete. We do, however, have a bucket list of
additional features we wish to support before we go stable:</xhtml:p>
<xhtml:ul>
<xhtml:li>A skeleton application. Ideally, we would like Composer hooks
that can ask which implementations for routing, container, and/or
templating are desired. If you know how to do this, we'd love your
help!</xhtml:li>
<xhtml:li>Session encryption.</xhtml:li>
<xhtml:li>HTTP Caching support.</xhtml:li>
<xhtml:li>User authentication (via OAuth2 and/or other social auth
mechanisms).</xhtml:li>
</xhtml:ul>
<xhtml:p>Additionally, in the coming weeks, we'll be expanding our
<xhtml:a href="https://github.com/zendframework/zend-psr7bridge">PSR-7
&lt;-&gt; zend-http bridge</xhtml:a>, and creating an alternate, PSR-7
middleware dispatcher that can be used with the ZF2 MVC.</xhtml:p>
<xhtml:p>We welcome any assistance you as contributors can offer in these
initiatives!</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Zend Framework 1.12.15 and 2.4.7 Released!]]></title>
    <published>2015-08-11T17:30:00+00:00</published>
    <updated>2015-08-11T17:30:00+00:00</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/zend-framework-1-12-15-and-2-4-7-released.html"/>
    <id>http://framework.zend.com/blog/zend-framework-1-12-15-and-2-4-7-released.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>The Zend Framework community is pleased to announce the
immediate availability of:</xhtml:p>
<xhtml:ul>
<xhtml:li>Zend Framework <xhtml:strong>1.12.15</xhtml:strong></xhtml:li>
<xhtml:li>Zend Framework <xhtml:strong>2.4.7</xhtml:strong></xhtml:li>
</xhtml:ul>
<xhtml:ul>
<xhtml:li><xhtml:a href="/downloads/latest">http://framework.zend.com/downloads/latest</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:h2>Zend Framework 1.12.15</xhtml:h2>
<xhtml:p>Zend Framework 1.12.15 contains several fixes to ensure
backwards compatibility with previous releases as well as supported
PHP versions:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="https:/github.com/zendframework/zf1/pull/591">#591</xhtml:a>
ensures that thet patch introduced to fix <xhtml:a href="/security/advisory/ZF2015-06">ZF2015-06</xhtml:a> works for PHP 5.2
users.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zf1/pull/587">#587</xhtml:a> fixes a
regular expression in
<xhtml:code>Zend_Http_Response::extractHeaders()</xhtml:code> to ensure it will
work with any valid header name, as well as empty header
values.</xhtml:li>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zf1/pull/597">#597</xhtml:a> updates
<xhtml:code>Zend_Http_Client_Adapter_Curl</xhtml:code> to ensure it properly
distinguishes between the <xhtml:code>timeout</xhtml:code> and
<xhtml:code>request_timeout</xhtml:code> options, using them to set
<xhtml:code>CURLOPT_CONNECTTIMEOUT</xhtml:code> and
<xhtml:code>CURLOPT_TIMEOUT</xhtml:code>, respectively.</xhtml:li>
</xhtml:ul>
<xhtml:p>For a full list of changes, see:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="/changelog/1.12.15">http://framework.zend.com/changelog/1.12.15</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:h2>Zend Framework 2.4.7</xhtml:h2>
<xhtml:p>Zend Framework 2.4.7 has a single change:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://github.com/zendframework/zend-inputfilter/pull/15">zend-inputfilter
#15</xhtml:a> ensures that input filters can validate not just arrays,
but objects implementing <xhtml:code>ArrayAccess</xhtml:code>, a scenario that
broke with fixes introduced for 2.4.5.</xhtml:li>
</xhtml:ul>
<xhtml:h2>Long Term Support</xhtml:h2>
<xhtml:p>As a reminder, the 2.4 series is our current Long Term Support
release, and will receive security and critical bug fixes until 31
March 2018.</xhtml:p>
<xhtml:p>You can opt-in to the LTS version by pinning your
<xhtml:code>zendframework/zendframework</xhtml:code> <xhtml:a href="https://getcomposer.org">Composer</xhtml:a> requirement to the version
<xhtml:code>~2.4.0</xhtml:code>.</xhtml:p>
<xhtml:p><xhtml:a href="/long-term-support">Visit our Long Term Support
information page</xhtml:a> for more information.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Zend Framework 1.12.14, 2.4.6 and 2.5.2 Released!]]></title>
    <published>2015-08-03T19:15:00+00:00</published>
    <updated>2015-08-03T19:15:00+00:00</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/zend-framework-1-12-14-2-4-6-and-2-5-2-released.html"/>
    <id>http://framework.zend.com/blog/zend-framework-1-12-14-2-4-6-and-2-5-2-released.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>The Zend Framework community is pleased to announce the
immediate availability of:</xhtml:p>
<xhtml:ul>
<xhtml:li>Zend Framework <xhtml:strong>1.12.14</xhtml:strong></xhtml:li>
<xhtml:li>Zend Framework <xhtml:strong>2.4.6</xhtml:strong></xhtml:li>
<xhtml:li>Zend Framework <xhtml:strong>2.5.2</xhtml:strong></xhtml:li>
</xhtml:ul>
<xhtml:ul>
<xhtml:li><xhtml:a href="/downloads/latest">http://framework.zend.com/downloads/latest</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:p>These releases contain a critical security fix.</xhtml:p>
<xhtml:h2>Security Fix</xhtml:h2>
<xhtml:p>Zend Framework versions 1.12.14, and 2.4.6, and 2.5.2 introduced
fixes for <xhtml:a href="/security/advisory/ZF2015-06">ZF2015-06</xhtml:a>, a
serious vulnerability in <xhtml:code>ZendXml</xhtml:code> when used under
PHP-FPM to process multibyte XML documents. The advisory provides
full details; if you process XML in your application and will be
deploying or already deploy using PHP-FPM, we recommend upgrading
immediately.</xhtml:p>
<xhtml:h2>Other changes</xhtml:h2>
<xhtml:p>Zend Framework 1.12.14 has two other changes that may impact
users:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:code>Zend_Service_DeveloperGarden</xhtml:code> was removed, as the
service closed its API on 30 June 2015.</xhtml:li>
<xhtml:li><xhtml:code>Zend_Service_Technorati</xhtml:code> was removed, as the API
has been unavailable for an indeterminate amount of time.</xhtml:li>
</xhtml:ul>
<xhtml:p>Both Zend Framework 2.4.6 and 2.5.2 also incorporate a change in
<xhtml:code>Zend\InputFilter</xhtml:code>; fixes done in the 2.4/2.5 series
removed support for fallback values when performing validation;
that support has been reinstated with the latest releases.</xhtml:p>
<xhtml:h3>Changelog</xhtml:h3>
<xhtml:p>For the full changelog on each version:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="/changelog/1.12.14">http://framework.zend.com/changelog/1.12.14</xhtml:a></xhtml:li>
<xhtml:li><xhtml:a href="/changelog/2.4.6">http://framework.zend.com/changelog/2.4.6</xhtml:a></xhtml:li>
<xhtml:li><xhtml:a href="/changelog/2.5.2">http://framework.zend.com/changelog/2.5.2</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:h2>Long Term Support</xhtml:h2>
<xhtml:p>As a reminder, the 2.4 series is our current Long Term Support
release, and will receive security and critical bug fixes until 31
March 2018.</xhtml:p>
<xhtml:p>You can opt-in to the LTS version by pinning your
<xhtml:code>zendframework/zendframework</xhtml:code> <xhtml:a href="https://getcomposer.org">Composer</xhtml:a> requirement to the version
<xhtml:code>~2.4.0</xhtml:code>.</xhtml:p>
<xhtml:p><xhtml:a href="/long-term-support">Visit our Long Term Support
information page</xhtml:a> for more information.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Zend Framework 2.4.5 Released!]]></title>
    <published>2015-07-28T16:45:00+00:00</published>
    <updated>2015-07-28T16:45:00+00:00</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/zend-framework-2-4-5-released.html"/>
    <id>http://framework.zend.com/blog/zend-framework-2-4-5-released.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>The Zend Framework community is pleased to announce the
immediate availability of Zend Framework <xhtml:strong>2.4.5</xhtml:strong>.
You can download it from the Zend Framework site:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="/downloads/latest">http://framework.zend.com/downloads/latest</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:p>This is a <xhtml:a href="/long-term-support/">Long Term Support</xhtml:a>
release.</xhtml:p>
<xhtml:h2>Bugfix</xhtml:h2>
<xhtml:p>This release contains a single critical bugfix. A <xhtml:a href="https://github.com/zendframework/zend-inputfilter/pull/7">developer
reported an issue against zend-inputfilter</xhtml:a>, indicating that the
combination of <xhtml:em>required</xhtml:em> and <xhtml:em>allow_empty</xhtml:em> was not
working as expected. When the given input was missing from the
submitted data set, the set was still considered valid, when it
should not be. When the value was present but empty, validation
worked as expected.</xhtml:p>
<xhtml:p>We supplied a patch to ensure behavior is as expected. The patch
is also applied to zend-inputfilter 2.5.2.</xhtml:p>
<xhtml:p>As this scenario affects a common use case for input validation,
we deemed the issue critical and backported the fix to the LTS
release.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Zend Framework 2.4.4 Released!]]></title>
    <published>2015-07-21T16:45:00+00:00</published>
    <updated>2015-07-21T16:45:00+00:00</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/zend-framework-2-4-4-released.html"/>
    <id>http://framework.zend.com/blog/zend-framework-2-4-4-released.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>The Zend Framework community is pleased to announce the
immediate availability of Zend Framework <xhtml:strong>2.4.4</xhtml:strong>.
You can download it from the Zend Framework site:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="/downloads/latest">http://framework.zend.com/downloads/latest</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:p>This is a <xhtml:a href="/long-term-support/">Long Term Support</xhtml:a>
release.</xhtml:p>
<xhtml:h2>Bugfix</xhtml:h2>
<xhtml:p>This release contains a single critical bugfix. A <xhtml:a href="https://github.com/zendframework/zend-stdlib/pull/9">developer
reported an issue against zend-stdlib</xhtml:a> indicating that our count
increment in <xhtml:code>Zend\Stdlib\PriorityList</xhtml:code> was incrementing
incorrectly, and failing to take into account whether or not the
item already was present.</xhtml:p>
<xhtml:p>As this scenario affects usage of PriorityList with duplicate
data, one of its specific use cases, we deemed the issue critical
and backported the fix to the LTS release.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Zend Framework 2.4.3 Released!]]></title>
    <published>2015-06-18T14:30:00+00:00</published>
    <updated>2015-06-18T14:30:00+00:00</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/zend-framework-2-4-3-released.html"/>
    <id>http://framework.zend.com/blog/zend-framework-2-4-3-released.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>The Zend Framework community is pleased to announce the
immediate availability of Zend Framework <xhtml:strong>2.4.3</xhtml:strong>.
You can download it from the Zend Framework site:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="/downloads/latest">http://framework.zend.com/downloads/latest</xhtml:a></xhtml:li>
</xhtml:ul>
<xhtml:p>This is a <xhtml:a href="/long-term-support/">Long Term Support</xhtml:a>
release.</xhtml:p>
<xhtml:h2>Bugfix</xhtml:h2>
<xhtml:p>This release contains a single critical bugfix. A <xhtml:a href="https://github.com/zendframework/zend-view/pull/4">developer
reported an issue against zend-view</xhtml:a> indicating that when using
port forwarding, and particularly when combined with non-standard
ports, the <xhtml:code>ServerUrl</xhtml:code> view helper was incorrectly
generating URIs containing both the local port and the public port.
As an example, a server running on port 10081, but accessed via
port 10088 was reporting a URI in the form "localhost:10088:10081".
For purposes of public links, the public port 10088 <xhtml:em>only</xhtml:em>
should be present in the generated URI.</xhtml:p>
<xhtml:p>As this scenario is common when using Vagrant, we deemed the
issue critical and backported the fix to the LTS release.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Zend Framework 2.5.1 Released!]]></title>
    <published>2015-06-04T15:30:00+00:00</published>
    <updated>2015-06-04T15:30:00+00:00</updated>
    <link rel="alternate" type="text/html" href="http://framework.zend.com/blog/zend-framework-2-5-1-released.html"/>
    <id>http://framework.zend.com/blog/zend-framework-2-5-1-released.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>matthew@zend.com</email>
      <uri>http://mwop.net/</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>Today we've released Zend Framework 2.5.1!</xhtml:p>
<xhtml:p>To update, use <xhtml:a href="https://getcomposer.org">Composer</xhtml:a>:</xhtml:p>
<xhtml:pre class="highlight">
<xhtml:code>
$ composer update zendframework/zendframework
</xhtml:code>
</xhtml:pre>
<xhtml:h3>Changes</xhtml:h3>
<xhtml:p>The only issue reported against 2.5.0 was a blocker for many:
with the shift to ZF becoming a metapackage, one component,
<xhtml:a href="https://github.com/zendframework/zend-ldap">zend-ldap</xhtml:a>,
had a hard requirement on a specific PHP extension (ext/ldap),
meaning that the extension then became a requirement for the entire
framework.</xhtml:p>
<xhtml:p>ZF 2.5.1 addresses this by making zend/ldap a <xhtml:a href="https://getcomposer.org/doc/04-schema.md#suggest">suggested</xhtml:a>
component. <xhtml:em>This means that the zend-ldap component is no longer
installed by default.</xhtml:em> If you rely on zend-ldap for your
application, you will need to perform the following after upgrading
to 2.5.1:</xhtml:p>
<xhtml:pre class="highlight">
<xhtml:code>
$ composer require zendframework/zend-ldap
</xhtml:code>
</xhtml:pre>
<xhtml:p>The above will add zend-ldap as a requirement to your project,
ensuring it is present going forward.</xhtml:p>
<xhtml:p>We also audited all other components for hard dependencies on
extensions; no other components did so.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
</feed>
